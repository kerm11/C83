SpringBoot推荐的配置文件：application.yml
YAML 是一种简洁的非标记语言。
基本规则
	大小写敏感 
	使用缩进表示层级关系 
	禁止使用tab缩进，只能使用空格键 
	缩进长度没有限制，只要元素缩进对齐就表示这些元素属于一个层级。
	使用#表示注释 
	三种数据结构：list、map、scalar
	设值时冒号后要带空格
	
SpringBoot 摒弃了 XML 配置方式, 转而使用 注解 + yml
	约定大于配置
	
spring-jdbc
	<bean class="...">
		<property>...
		<property>...
		<property>...
		<property>...
	</bean>
	

Spring 		传统的配置:   class + 属性 ==> bean
SpringBoot	a, b, c ==> A
			a, c, d ==> B
	
	
	
SpringBoot 入门
对Spring简化配置, SpringCloud的基础
SpringBoot整合了所有框架 ==> 套餐式的打包
	
特性:
1. 独立运行 ==> jar运行 ( web)
2. 内嵌Servlet容器 ==> Tomcat(默认), jetty ...
3. 简化配置
4. 约定大于配置
5. 监控服务
	
	
SpringBoot 工程结构
src/main/resources
			static		==> 静态资源
			templates	==> 模版网页( jsp thymeleaf)

pom.xml 的变化
	依赖的引用很多没有版本
		父工程: spring-boot-starter-parent	==> 配置了基本的SpringBoot工程属性
			application.yml or application.yaml
				更好语义性, 字符支持
			application.properties  老旧
			爷工程: spring-boot-dependencies ==> 管理着所有的jar版本
			
编程过程:
1. 加入依赖( starter )
2. 配置yml
3. 业务代码编程
		

SpringBoot配置过程
	
@SpringBootApplication是一个复合注解，包括：
@ComponentScan
	扫描当前包及其子包下被@Component，@Controller，@Service，@Repository注解标记的类并纳入到spring容器中进行管理。是以前的<context:component-scan>
	默认扫描SpringBoot主类所在包, 以及以下的子包
	
@SpringBootConfiguration
	继承自@Configuration，二者功能也一致，标注当前类是配置类，并会将当前类内声明的一个或多个以@Bean注解标记的方法的实例纳入到srping容器中，并且实例名就是方法名。
@EnableAutoConfiguration。
	启动自动的配置，该注解的意思就是Springboot根据你添加的jar包来配置你项目的默认配置，比如根据spring-boot-starter-web ，来判断你的项目是否需要添加了webmvc和tomcat，就会自动的帮你配置web项目中所需要的默认配置。在下面博客会具体分析这个注解，快速入门的demo实际没有用到该注解。

	
AutoConfigurationImportSelector.class
	自动加载配置的选择器

MyBatis 为例:	
mybatis-spring-boot-starter-2.1.3.jar  
	启动器jar包

mybatis-spring-boot-autoconfigure-2.1.3.jar
	自动配置jar包
	spring.factories 配置了当前starter的自动配置类
	org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration,\
org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration

	@ConditionalOnXxxxx 当前starter启动前置条件:
		@ConditionalOnClass: 类路径中必须有该类定义
		
	@EnableConfigurationProperties
		开启配置属性 ==> 可以在 yml 中读取配置属性
		
	@AutoConfigureAfter
		定义启动的顺序

SpringBoot 自带启动配置
	spring-boot-autoconfigure-2.3.3.RELEASE.jar
		spring.factories

	
thymeleaf 是新一代的模板引擎，在spring4.0中推荐使用thymeleaf来做前端模版引擎。
它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点：
静态运行
开箱即用
与SpringBoot完美结合
	
	
	
cron表达式详解
*：表示匹配该域的任意值。假如在Minutes域使用*, 即表示每分钟都会触发事件。
?：只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用*，如果使用*表示不管星期几都会触发，实际上并不是这样。
-：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次 
/：表示起始时间开始触发，然后每隔固定时间触发一次。例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次. 
,：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。 
L：表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。 
W:表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。
LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。 
#:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。


cron表达式实例：
　　0 0 2 1 * ? *   表示在每月的1日的凌晨2点调整任务
　　0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业
　　0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作
　　0 0 10,14,16 * * ?   每天上午10点，下午2点，4点 
　　0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时 
　　0 0 12 ? * WED    表示每个星期三中午12点 
　　0 0 12 * * ?   每天中午12点触发 
　　0 15 10 ? * *    每天上午10:15触发 
　　0 15 10 * * ?     每天上午10:15触发 
　　0 15 10 * * ? *    每天上午10:15触发 
　　0 15 10 * * ? 2005    2005年的每天上午10:15触发 
　　0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发 
　　0 0/5 14 * * ?    在每天下午2点到下午2:55期间的每5分钟触发 